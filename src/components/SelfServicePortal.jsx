import React, { useState } from 'react'
import { 
  UserIcon, 
  CogIcon, 
  DocumentTextIcon, 
  QuestionMarkCircleIcon,
  ChatBubbleLeftRightIcon,
  BellIcon,
  ShieldCheckIcon,
  CalendarIcon,
  CurrencyDollarIcon,
  HeartIcon,
  AcademicCapIcon,
  BriefcaseIcon,
  ClockIcon,
  CheckCircleIcon,
  ExclamationTriangleIcon,
  InformationCircleIcon
} from '@heroicons/react/24/outline'
import { 
  UserIcon as UserSolidIcon,
  ChatBubbleLeftRightIcon as ChatSolidIcon
} from '@heroicons/react/24/solid'

const SelfServicePortal = ({ currentUser }) => {
  const [activeTab, setActiveTab] = useState('profile')
  const [chatbotOpen, setChatbotOpen] = useState(false)
  const [chatMessages, setChatMessages] = useState([
    {
      id: 1,
      type: 'bot',
      message: 'Xin ch√†o! T√¥i l√† AI Assistant c·ªßa VEGA Life. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ ch√≠nh s√°ch, ph√∫c l·ª£i v√† quy tr√¨nh c·ªßa c√¥ng ty. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?',
      timestamp: new Date().toLocaleTimeString('vi-VN')
    }
  ])
  const [chatInput, setChatInput] = useState('')

  const userProfile = {
    ...currentUser,
    employeeId: 'EMP001234',
    startDate: '15/03/2022',
    manager: 'Nguy·ªÖn VƒÉn Gi√°m ƒë·ªëc',
    team: 'Development Team',
    skills: ['React', 'Node.js', 'TypeScript', 'AWS', 'Docker'],
    certifications: ['AWS Certified Developer', 'Google Cloud Professional'],
    emergencyContact: {
      name: 'Nguy·ªÖn Th·ªã V·ª£',
      phone: '0901234567',
      relationship: 'V·ª£/Ch·ªìng'
    }
  }

  const quickServices = [
    {
      title: 'Ngh·ªâ ph√©p',
      description: 'ƒêƒÉng k√Ω ngh·ªâ ph√©p, xem l·ªãch ngh·ªâ',
      icon: CalendarIcon,
      color: 'bg-blue-500',
      href: '/leave'
    },
    {
      title: 'L∆∞∆°ng & Th∆∞·ªüng',
      description: 'Xem b·∫£ng l∆∞∆°ng, th∆∞·ªüng th√°ng',
      icon: CurrencyDollarIcon,
      color: 'bg-green-500',
      href: '/salary'
    },
    {
      title: 'B·∫£o hi·ªÉm',
      description: 'Th√¥ng tin b·∫£o hi·ªÉm x√£ h·ªôi, y t·∫ø',
      icon: ShieldCheckIcon,
      color: 'bg-purple-500',
      href: '/insurance'
    },
    {
      title: 'ƒê√†o t·∫°o',
      description: 'ƒêƒÉng k√Ω kh√≥a h·ªçc, xem ch·ª©ng ch·ªâ',
      icon: AcademicCapIcon,
      color: 'bg-yellow-500',
      href: '/training'
    },
    {
      title: 'Ph√∫c l·ª£i',
      description: 'Th√¥ng tin ph√∫c l·ª£i, voucher',
      icon: HeartIcon,
      color: 'bg-pink-500',
      href: '/benefits'
    },
    {
      title: 'C√¥ng vi·ªác',
      description: 'M√¥ t·∫£ c√¥ng vi·ªác, m·ª•c ti√™u',
      icon: BriefcaseIcon,
      color: 'bg-indigo-500',
      href: '/job'
    }
  ]

  const recentDocuments = [
    {
      id: 1,
      title: 'H·ª£p ƒë·ªìng lao ƒë·ªông',
      type: 'Contract',
      date: '15/03/2022',
      status: 'Active',
      downloadUrl: '#'
    },
    {
      id: 2,
      title: 'Quy ƒë·ªãnh c√¥ng ty 2024',
      type: 'Policy',
      date: '01/01/2024',
      status: 'Updated',
      downloadUrl: '#'
    },
    {
      id: 3,
      title: 'B·∫£ng l∆∞∆°ng th√°ng 12/2023',
      type: 'Payroll',
      date: '05/01/2024',
      status: 'Available',
      downloadUrl: '#'
    }
  ]

  const notifications = [
    {
      id: 1,
      title: 'ƒê∆°n ngh·ªâ ph√©p ƒë√£ ƒë∆∞·ª£c duy·ªát',
      message: 'ƒê∆°n ngh·ªâ ph√©p c·ªßa b·∫°n t·ª´ 20-22/01 ƒë√£ ƒë∆∞·ª£c gi√°m ƒë·ªëc duy·ªát.',
      type: 'success',
      timestamp: '2 gi·ªù tr∆∞·ªõc',
      isRead: false
    },
    {
      id: 2,
      title: 'Nh·∫Øc nh·ªü ƒë√°nh gi√° hi·ªáu su·∫•t',
      message: 'Vui l√≤ng ho√†n th√†nh ƒë√°nh gi√° hi·ªáu su·∫•t qu√Ω IV tr∆∞·ªõc 31/01.',
      type: 'warning',
      timestamp: '1 ng√†y tr∆∞·ªõc',
      isRead: false
    },
    {
      id: 3,
      title: 'Th√¥ng b√°o ngh·ªâ l·ªÖ T·∫øt',
      message: 'C√¥ng ty s·∫Ω ngh·ªâ t·ª´ 08-16/02/2024 ƒë·ªÉ ngh·ªâ l·ªÖ T·∫øt Nguy√™n ƒë√°n.',
      type: 'info',
      timestamp: '3 ng√†y tr∆∞·ªõc',
      isRead: true
    }
  ]

  const faqItems = [
    {
      id: 1,
      question: 'L√†m th·∫ø n√†o ƒë·ªÉ ƒëƒÉng k√Ω ngh·ªâ ph√©p?',
      answer: 'B·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω ngh·ªâ ph√©p qua h·ªá th·ªëng HR Portal ho·∫∑c g·ª≠i email tr·ª±c ti·∫øp cho qu·∫£n l√Ω tr·ª±c ti·∫øp.',
      category: 'Leave'
    },
    {
      id: 2,
      question: 'Khi n√†o nh·∫≠n ƒë∆∞·ª£c l∆∞∆°ng?',
      answer: 'L∆∞∆°ng ƒë∆∞·ª£c thanh to√°n v√†o ng√†y 25 h√†ng th√°ng. N·∫øu ng√†y 25 r∆°i v√†o cu·ªëi tu·∫ßn, l∆∞∆°ng s·∫Ω ƒë∆∞·ª£c chuy·ªÉn v√†o ng√†y l√†m vi·ªác g·∫ßn nh·∫•t.',
      category: 'Salary'
    },
    {
      id: 3,
      question: 'C√°ch ƒëƒÉng k√Ω kh√≥a ƒë√†o t·∫°o?',
      answer: 'B·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω kh√≥a ƒë√†o t·∫°o qua m·ª•c "ƒê√†o t·∫°o" trong Self-Service Portal ho·∫∑c li√™n h·ªá HR Department.',
      category: 'Training'
    }
  ]

  const handleChatSubmit = (e) => {
    e.preventDefault()
    if (chatInput.trim()) {
      const userMessage = {
        id: chatMessages.length + 1,
        type: 'user',
        message: chatInput,
        timestamp: new Date().toLocaleTimeString('vi-VN')
      }
      
      const botResponse = {
        id: chatMessages.length + 2,
        type: 'bot',
        message: generateBotResponse(chatInput),
        timestamp: new Date().toLocaleTimeString('vi-VN')
      }
      
      setChatMessages([...chatMessages, userMessage, botResponse])
      setChatInput('')
    }
  }

  const generateBotResponse = (input) => {
    const lowerInput = input.toLowerCase()
    
    if (lowerInput.includes('ngh·ªâ ph√©p') || lowerInput.includes('leave')) {
      return 'ƒê·ªÉ ƒëƒÉng k√Ω ngh·ªâ ph√©p, b·∫°n c√≥ th·ªÉ:\n1. Truy c·∫≠p m·ª•c "Ngh·ªâ ph√©p" trong Self-Service Portal\n2. G·ª≠i email cho qu·∫£n l√Ω tr·ª±c ti·∫øp\n3. Li√™n h·ªá HR Department qua s·ªë hotline: 1900-xxxx'
    } else if (lowerInput.includes('l∆∞∆°ng') || lowerInput.includes('salary')) {
      return 'Th√¥ng tin v·ªÅ l∆∞∆°ng:\n- Ng√†y thanh to√°n: 25 h√†ng th√°ng\n- C√≥ th·ªÉ xem chi ti·∫øt trong m·ª•c "L∆∞∆°ng & Th∆∞·ªüng"\n- Li√™n h·ªá Payroll team n·∫øu c√≥ th·∫Øc m·∫Øc'
    } else if (lowerInput.includes('b·∫£o hi·ªÉm') || lowerInput.includes('insurance')) {
      return 'Th√¥ng tin b·∫£o hi·ªÉm:\n- B·∫£o hi·ªÉm x√£ h·ªôi, y t·∫ø, th·∫•t nghi·ªáp\n- B·∫£o hi·ªÉm s·ª©c kh·ªèe b·ªï sung\n- Chi ti·∫øt trong m·ª•c "B·∫£o hi·ªÉm"'
    } else {
      return 'C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:\n- Ch√≠nh s√°ch ngh·ªâ ph√©p\n- Th√¥ng tin l∆∞∆°ng th∆∞·ªüng\n- B·∫£o hi·ªÉm v√† ph√∫c l·ª£i\n- ƒê√†o t·∫°o v√† ph√°t tri·ªÉn\n\nB·∫°n mu·ªën bi·∫øt th√™m v·ªÅ ch·ªß ƒë·ªÅ n√†o?'
    }
  }

  const getNotificationIcon = (type) => {
    switch (type) {
      case 'success':
        return <CheckCircleIcon className="h-5 w-5 text-green-500" />
      case 'warning':
        return <ExclamationTriangleIcon className="h-5 w-5 text-yellow-500" />
      case 'info':
        return <InformationCircleIcon className="h-5 w-5 text-blue-500" />
      default:
        return <BellIcon className="h-5 w-5 text-gray-500" />
    }
  }

  return (
    <div className="space-y-6">
      {/* Hero Section */}
      <div className="bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 rounded-2xl p-8 text-white">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold mb-2">üë§ C·ªïng D·ªãch V·ª• C√° Nh√¢n</h1>
            <p className="text-lg opacity-90">Qu·∫£n l√Ω th√¥ng tin v√† truy c·∫≠p c√°c d·ªãch v·ª• n·ªôi b·ªô</p>
          </div>
          <div className="hidden md:block">
            <UserIcon className="h-24 w-24 text-white opacity-80" />
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="border-b border-gray-200">
        <nav className="-mb-px flex space-x-8">
          {[
            { id: 'profile', name: 'H·ªì s∆° c√° nh√¢n', icon: UserIcon },
            { id: 'services', name: 'D·ªãch v·ª• nhanh', icon: CogIcon },
            { id: 'documents', name: 'T√†i li·ªáu', icon: DocumentTextIcon },
            { id: 'notifications', name: 'Th√¥ng b√°o', icon: BellIcon },
            { id: 'faq', name: 'H·ªèi ƒë√°p', icon: QuestionMarkCircleIcon }
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === tab.id
                  ? 'border-primary-500 text-primary-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <tab.icon className="h-5 w-5" />
              <span>{tab.name}</span>
            </button>
          ))}
        </nav>
      </div>

      {/* Profile Tab */}
      {activeTab === 'profile' && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-1">
            <div className="card text-center">
              <img
                src={userProfile.avatar}
                alt={userProfile.name}
                className="h-32 w-32 rounded-full mx-auto mb-4"
              />
              <h2 className="text-xl font-semibold text-gray-900 mb-2">{userProfile.name}</h2>
              <p className="text-gray-600 mb-4">{userProfile.role}</p>
              <div className="space-y-2 text-sm text-gray-500">
                <p>ID: {userProfile.employeeId}</p>
                <p>B·∫Øt ƒë·∫ßu: {userProfile.startDate}</p>
                <p>Ph√≤ng ban: {userProfile.department}</p>
                <p>Team: {userProfile.team}</p>
                <p>Qu·∫£n l√Ω: {userProfile.manager}</p>
              </div>
              <button className="btn-primary mt-4 w-full">
                Ch·ªânh s·ª≠a h·ªì s∆°
              </button>
            </div>
          </div>
          
          <div className="lg:col-span-2 space-y-6">
            {/* Skills */}
            <div className="card">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">K·ªπ nƒÉng</h3>
              <div className="flex flex-wrap gap-2">
                {userProfile.skills.map((skill, index) => (
                  <span key={index} className="badge badge-primary">
                    {skill}
                  </span>
                ))}
              </div>
            </div>

            {/* Certifications */}
            <div className="card">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Ch·ª©ng ch·ªâ</h3>
              <div className="space-y-3">
                {userProfile.certifications.map((cert, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <AcademicCapIcon className="h-6 w-6 text-primary-600" />
                      <span className="font-medium">{cert}</span>
                    </div>
                    <span className="text-sm text-green-600 font-medium">Ho√†n th√†nh</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Emergency Contact */}
            <div className="card">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Li√™n h·ªá kh·∫©n c·∫•p</h3>
              <div className="space-y-2">
                <p><strong>T√™n:</strong> {userProfile.emergencyContact.name}</p>
                <p><strong>Quan h·ªá:</strong> {userProfile.emergencyContact.relationship}</p>
                <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {userProfile.emergencyContact.phone}</p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Services Tab */}
      {activeTab === 'services' && (
        <div className="space-y-6">
          <h2 className="text-xl font-semibold text-gray-900">D·ªãch v·ª• nhanh</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {quickServices.map((service, index) => (
              <div key={index} className="card card-hover cursor-pointer">
                <div className="flex items-center space-x-4">
                  <div className={`p-3 rounded-lg ${service.color} text-white`}>
                    <service.icon className="h-8 w-8" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900">{service.title}</h3>
                    <p className="text-sm text-gray-600">{service.description}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Documents Tab */}
      {activeTab === 'documents' && (
        <div className="space-y-6">
          <h2 className="text-xl font-semibold text-gray-900">T√†i li·ªáu c·ªßa b·∫°n</h2>
          <div className="space-y-4">
            {recentDocuments.map((doc) => (
              <div key={doc.id} className="card">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <div className="p-3 bg-primary-100 rounded-lg">
                      <DocumentTextIcon className="h-6 w-6 text-primary-600" />
                    </div>
                    <div>
                      <h3 className="font-semibold text-gray-900">{doc.title}</h3>
                      <p className="text-sm text-gray-600">
                        {doc.type} ‚Ä¢ {doc.date}
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <span className={`badge ${
                      doc.status === 'Active' ? 'badge-success' :
                      doc.status === 'Updated' ? 'badge-warning' :
                      'badge-primary'
                    }`}>
                      {doc.status}
                    </span>
                    <button className="btn-primary">
                      T·∫£i xu·ªëng
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Notifications Tab */}
      {activeTab === 'notifications' && (
        <div className="space-y-6">
          <h2 className="text-xl font-semibold text-gray-900">Th√¥ng b√°o</h2>
          <div className="space-y-4">
            {notifications.map((notification) => (
              <div key={notification.id} className={`card ${!notification.isRead ? 'bg-blue-50 border-blue-200' : ''}`}>
                <div className="flex items-start space-x-4">
                  {getNotificationIcon(notification.type)}
                  <div className="flex-1">
                    <h3 className="font-semibold text-gray-900 mb-1">{notification.title}</h3>
                    <p className="text-gray-600 mb-2">{notification.message}</p>
                    <p className="text-sm text-gray-500">{notification.timestamp}</p>
                  </div>
                  {!notification.isRead && (
                    <div className="h-2 w-2 bg-blue-500 rounded-full"></div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* FAQ Tab */}
      {activeTab === 'faq' && (
        <div className="space-y-6">
          <h2 className="text-xl font-semibold text-gray-900">C√¢u h·ªèi th∆∞·ªùng g·∫∑p</h2>
          <div className="space-y-4">
            {faqItems.map((faq) => (
              <div key={faq.id} className="card">
                <div className="space-y-2">
                  <h3 className="font-semibold text-gray-900">{faq.question}</h3>
                  <p className="text-gray-600">{faq.answer}</p>
                  <span className="badge badge-primary text-xs">{faq.category}</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Chatbot */}
      <div className="fixed bottom-6 right-6 z-50">
        {!chatbotOpen && (
          <button
            onClick={() => setChatbotOpen(true)}
            className="bg-primary-600 text-white p-4 rounded-full shadow-lg hover:bg-primary-700 transition-colors"
          >
            <ChatSolidIcon className="h-6 w-6" />
          </button>
        )}
        
        {chatbotOpen && (
          <div className="bg-white rounded-lg shadow-xl w-80 h-96 flex flex-col">
            <div className="bg-primary-600 text-white p-4 rounded-t-lg flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <ChatSolidIcon className="h-5 w-5" />
                <span className="font-semibold">AI Assistant</span>
              </div>
              <button
                onClick={() => setChatbotOpen(false)}
                className="text-white hover:text-gray-200"
              >
                √ó
              </button>
            </div>
            
            <div className="flex-1 p-4 overflow-y-auto space-y-3">
              {chatMessages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-xs p-3 rounded-lg ${
                      message.type === 'user'
                        ? 'bg-primary-600 text-white'
                        : 'bg-gray-100 text-gray-900'
                    }`}
                  >
                    <p className="text-sm whitespace-pre-line">{message.message}</p>
                    <p className="text-xs opacity-70 mt-1">{message.timestamp}</p>
                  </div>
                </div>
              ))}
            </div>
            
            <form onSubmit={handleChatSubmit} className="p-4 border-t">
              <div className="flex space-x-2">
                <input
                  type="text"
                  value={chatInput}
                  onChange={(e) => setChatInput(e.target.value)}
                  placeholder="Nh·∫≠p c√¢u h·ªèi..."
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-primary-500 focus:border-transparent outline-none"
                />
                <button
                  type="submit"
                  className="bg-primary-600 text-white px-4 py-2 rounded-lg hover:bg-primary-700 transition-colors"
                >
                  G·ª≠i
                </button>
              </div>
            </form>
          </div>
        )}
      </div>
    </div>
  )
}

export default SelfServicePortal


